call plug#begin('~/.vim/plugged')
  Plug 'SirVer/ultisnips'
  " Plug 'Valloric/YouCompleteMe'
  Plug 'akinsho/nvim-bufferline.lua'
  Plug 'airblade/vim-gitgutter'
  Plug 'arcticicestudio/nord-vim'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'edkolev/tmuxline.vim'
  Plug 'ervandew/supertab'
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'guns/vim-clojure-highlight'
  Plug 'guns/vim-sexp'
  Plug 'honza/vim-snippets'
  Plug 'hrsh7th/nvim-compe'
  Plug 'jparise/vim-graphql'
  Plug 'junegunn/fzf', { 'do':  { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'kyazdani42/nvim-web-devicons'
  Plug 'leafgarland/typescript-vim'
  Plug 'lukas-reineke/indent-blankline.nvim'
  Plug 'mxw/vim-jsx'
  Plug 'neovim/nvim-lspconfig'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'onsails/lspkind-nvim'
  Plug 'pangloss/vim-javascript'
  Plug 'posva/vim-vue'
  Plug 'preservim/nerdcommenter'
  Plug 'preservim/nerdtree'
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
  Plug 'rust-lang/rust.vim'
  Plug 'ryanoasis/vim-devicons'
  Plug 'tpope/vim-fireplace'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-sexp-mappings-for-regular-people'
  Plug 'tpope/vim-surround'
  Plug 'venantius/vim-cljfmt'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  " telescope
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'

call plug#end()

" Text Formatting - General
set autoindent
set smartindent
set nowrap
set tabstop=4
set shiftwidth=2
set softtabstop=2
set expandtab
set nosmarttab
set encoding=utf-8
set shortmess+=a
set autoread

" Relative numbers
set relativenumber
set numberwidth=3
autocmd WinEnter,FocusGained * :setlocal number relativenumber
autocmd WinLeave,FocusLost   * :setlocal number norelativenumber

" Copy paste
if $TMUX == ''
  set clipboard+=unnamed
endif

" Switch words
nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o>:noh<CR>

" Special Case Text Formatting
au FileType python,go set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

" Language syntax highlighting
au BufNewFile,BufRead {Gemfile,Rakefile,Vagrantfile,config.ru}    set ft=ruby " random files that are ruby-esq
au BufNewFile,BufRead *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup() " markdown
au BufNewFile,BufRead *.json set ft=javascript " json
augroup filetype javascript syntax=javascript
au BufNewFile,BufRead *.babelrc set ft=javascript " babel
au BufNewFile,BufRead *.hamlc set ft=haml
au BufNewFile,BufRead *.{handlebars,hbs,ejs} set ft=html
au BufNewFile,BufRead *.cr set ft=crystal

" UI
set laststatus=2
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,.node_modules
set number
set ruler
set nolazyredraw
set noshowcmd
set guifont=Hack\ Nerd\ Font\ 13

" Visual
set showmatch
set mat=5
set vb t_vb= " No Beeping or flashing...
set hlsearch
set incsearch
set ignorecase
set smartcase
set splitbelow
set splitright

syntax enable
colorscheme nord
set background=dark
set termguicolors

" Indent Guides
let g:indent_guides_guide_size=1
let g:indent_guide_start_level=1
let g:indent_guides_enable_on_vim_startup = 0
nmap <Leader>i <plug>IndentGuidesToggle<Esc>

" Configuration
set nocompatible
set nobackup
set nowritebackup
set noswapfile
filetype plugin indent on

" Mouse
set mouse=a

" Comments
map <Leader>/ <plug>NERDCommenterToggle<Esc>
imap <Leader>/ <Esc><plug>NERDCommenterToggle<Esc>

" C-# switches to tab
nmap <Leader>1 1gt
nmap <Leader>2 2gt
nmap <Leader>3 3gt
nmap <Leader>4 4gt
nmap <Leader>5 5gt
nmap <Leader>6 6gt

" Switch between panes more naturally
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
noremap <C-H> <C-W><C-H>

" Splits
noremap <leader>sc :close<CR>
noremap <leader>sh :sp<CR>
noremap <leader>sv :vsp<CR>


" NERDTree
function! ShowFileInNERDTree()
  if exists("t:NERDTreeBufName")
    NERDTreeFind
  else
    NERDTree
    wincmd l
    NERDTreeFind
  endif
endfunction

nnoremap <Leader>F :call ShowFileInNERDTree()<CR>
nnoremap <Leader>] :NERDTreeToggle<CR>
nnoremap <Leader>n :NERDTreeFocus<CR>
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
let NERDTreeShowLineNumbers=1
let g:NERDTreeWinSize=45
let g:NERDTreeWinPos = "right"

" Telescope
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" fzf
set rtp+=/usr/local/opt/fzf
let g:fzf_layout = { 'down': '~35%' }
nnoremap <Leader>f :FZF<cr>
nnoremap <Leader>gs :GFiles?<cr>
nnoremap <Leader>gg :GGrep?<cr>
nnoremap <Leader>ag :Ag<cr>

" fzf GGrep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" Vim Airline
"
let g:airline_theme='nord'
let g:airline_powerline_fonts = 1

" React
let g:jsx_ext_required = 0

" Flow
let g:javascript_plugin_flow = 0

" YCM
" let g:ycm_key_list_select_completion = ['<c-j>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<c-k>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<c-n>'
" let g:ycm_server_use_vim_stdout = 2
" let g:ycm_server_log_level = 'debug'
" nnoremap <leader>jd :YcmCompleter GoTo<CR>


" Snippets
" let g:UltiSnipsExpandTrigger = '<tab>'
" let g:UltiSnipsJumpForwardTrigger = '<tab>'
" let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" Splits
noremap <leader>sc :close<CR>
noremap <leader>sh :sp<CR>
noremap <leader>sv :vsp<CR>

" Prettier
let g:prettier#autoformat = 0

" ctags
set tags=tags

" Fugitive
nnoremap <Leader>g :Git<cr>

" compe
set completeopt=menuone,noselect
let g:compe = {}                  
let g:compe.enabled = v:true      
let g:compe.source = {            
  \ 'path': v:true,               
  \ 'buffer': v:true,             
  \ 'nvim_lsp': v:true,
  \ 'utltisnips': v:true
  \ }                             
inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })


lua << EOF
require'lspconfig'.solargraph.setup{}
require'lspconfig'.clojure_lsp.setup{}

require'indent_blankline'.setup{
    buftype_exclude = {"terminal"},
    show_current_context = true
}
require('lspkind').init({})
EOF

