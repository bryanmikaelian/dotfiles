call plug#begin('~/.vim/plugged')
  " core
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  
  " plugins
  Plug 'arcticicestudio/nord-vim'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'edkolev/tmuxline.vim'
  Plug 'ervandew/supertab'
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'famiu/feline.nvim'
  Plug 'glepnir/dashboard-nvim'
  Plug 'guns/vim-sexp'
  Plug 'guns/vim-clojure-static'
  Plug 'guns/vim-clojure-highlight'
  Plug 'honza/vim-snippets'
  Plug 'kyazdani42/nvim-web-devicons'
  Plug 'kyazdani42/nvim-tree.lua'
  Plug 'lewis6991/gitsigns.nvim'
  Plug 'lukas-reineke/indent-blankline.nvim'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'onsails/lspkind-nvim'
  Plug 'p00f/nvim-ts-rainbow'
  Plug 'preservim/nerdcommenter'
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
  Plug 'rust-lang/rust.vim'
  Plug 'sroelants/clojure-fancify-symbols.vim'
  Plug 'tpope/vim-fireplace'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-salve'
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-sexp-mappings-for-regular-people'
  Plug 'tpope/vim-surround'
  Plug 'venantius/vim-cljfmt'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'windwp/nvim-autopairs'

call plug#end()

" Relative numbers
set relativenumber
set numberwidth=3
autocmd WinEnter,FocusGained * :setlocal number relativenumber
autocmd WinLeave,FocusLost   * :setlocal number norelativenumber

" Copy paste
if $TMUX == ''
  set clipboard+=unnamed
endif

" Switch words
nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o>:noh<CR>

" Special Case Text Formatting
au FileType python,go set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

" Language syntax highlighting
au BufNewFile,BufRead {Gemfile,Rakefile,Vagrantfile,config.ru}    set ft=ruby " random files that are ruby-esq
au BufNewFile,BufRead *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup() " markdown
au BufNewFile,BufRead *.json set ft=javascript " json
augroup filetype javascript syntax=javascript
au BufNewFile,BufRead *.babelrc set ft=javascript " babel
au BufNewFile,BufRead *.hamlc set ft=haml
au BufNewFile,BufRead *.{handlebars,hbs,ejs} set ft=html
au BufNewFile,BufRead *.cr set ft=crystal

" Configuration
set nocompatible
set nobackup
set nowritebackup
set noswapfile
filetype plugin indent on

" Mouse
set mouse=a

" Comments
map <Leader>/ <plug>NERDCommenterToggle<Esc>
imap <Leader>/ <Esc><plug>NERDCommenterToggle<Esc>

" C-# switches to tab
nmap <Leader>1 1gt
nmap <Leader>2 2gt
nmap <Leader>3 3gt
nmap <Leader>4 4gt
nmap <Leader>5 5gt
nmap <Leader>6 6gt

" Switch between panes more naturally
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
noremap <C-H> <C-W><C-H>

" Splits
noremap <leader>sc :close<CR>
noremap <leader>sh :sp<CR>
noremap <leader>sv :vsp<CR>

" Nvim Tree
let g:nvim_tree_window_picker_exclude = {
    \   'filetype': [
    \     'packer',
    \     'qf'
    \   ],
    \   'buftype': [
    \     'terminal'
    \   ]
    \ }
let g:nvim_tree_special_files = { 'README.md': 1, 'Makefile': 1, 'MAKEFILE': 1 } " List of filenames that gets highlighted with NvimTreeSpecialFile
let g:nvim_tree_show_icons = {
    \ 'git': 1,
    \ 'folders': 1,
    \ 'files': 1,
    \ 'folder_arrows': 1,
    \ }

" default will show icon by default if no icon is provided
" default shows no icon by default
nnoremap <C-n> :NvimTreeToggle<CR>
nnoremap <leader>r :NvimTreeRefresh<CR>
nnoremap <leader>n :NvimTreeFindFile<CR>
" NvimTreeOpen, NvimTreeClose and NvimTreeFocus are also available if you need them

" a list of groups can be found at `:help nvim_tree_highlight`

highlight NvimTreeFolderIcon guibg=blue
let g:nvim_tree_icons = {
    \ }

" Telescope
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Vim Airline
let g:airline_theme='nord'
let g:airline_powerline_fonts = 1

" Splits
noremap <leader>sc :close<CR>
noremap <leader>sh :sp<CR>
noremap <leader>sv :vsp<CR>

" Prettier
let g:prettier#autoformat = 0

" ctags
set tags=tags

" Fugitive
set wildmode=list:longest,list:full

" dashboard
let g:dashboard_default_executive = "telescope"

" bell
set vb t_vb= " No Beeping or flashing...

lua << EOF

-- ui
vim.opt.laststatus = 2
vim.opt.lazyredraw = false
vim.opt.showcmd = false
vim.opt.guifont = 'CaskaydiaCove Nerd Font Mono'

-- text and formatting
vim.opt.autoindent = true
vim.opt.smartindent = true
vim.opt.wrap = false
vim.opt.tabstop = 4
vim.opt.shiftwidth = 2
vim.opt.softtabstop = 2
vim.opt.expandtab = true
vim.opt.smarttab = false
vim.opt.encoding = 'utf-8'
vim.o.shortmess = vim.o.shortmess .. 'a'
vim.opt.autoread = true

-- visual
vim.opt.showmatch = true
vim.opt.mat = 5
vim.opt.hlsearch = true
vim.opt.incsearch = true
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.splitbelow = true
vim.opt.splitright = true


-- colors
vim.api.nvim_command [[colorscheme nord]]
vim.opt.syntax = 'enable'
vim.opt.background = 'dark'
vim.opt.termguicolors = true


-- plugin configs
require('gitsigns').setup()

require'indent_blankline'.setup{
    buftype_exclude = {"terminal"},
    show_current_context = true
}
require('lspkind').init({})

require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = {
    enable = true,
    disable = {},
    additional_vim_regex_highlighting = false
  },
  rainbow = {
    enable = true,
    extended_mode = true,
    max_file_lines = nil,
    colors = {
      "#8fbcbb",
      "#88C0D0",
      "#81A1C1",
      "#5E81AC"
    }
  }
}

require('telescope').setup {
  defaults = {
    file_ignore_patterns = { "node_modules", "target" }
  }
}

require('nvim-autopairs').setup{}

require('nvim-tree').setup {
  disable_netrw       = true,
  hijack_netrw        = true,
  open_on_setup       = false,
  ignore_ft_on_setup  = {},
  auto_close          = false,
  open_on_tab         = false,
  hijack_cursor       = false,
  update_cwd          = false,
  update_to_buf_dir   = {
    enable = true,
    auto_open = true,
  },
  update_focused_file = {
    enable      = false,
    update_cwd  = false,
    ignore_list = {}
  },
  system_open = {
    cmd  = nil,
    args = {}
  },
  filters = {
    dotfiles = false,
    custom = {}
  },
  view = {
    width = 40,
    height = 30,
    hide_root_folder = false,
    side = 'right',
    auto_resize = false,
    ignore = {'.git', 'node_modules', '.cache'},
    gitignore = true,
    auto_open = false,
    auto_close = false,
    auto_ignore_ft = {'startify', 'dashboard'},
    quit_on_open = true,
    tree_follow = true,
    indent_markers = true,
    hide_dotfiles = true,
    git_hl = true,
    highlight_opened_files = true,
    root_folder_modifier = ':~',
    tab_open = true,
    auto_resize = false,
    disable_netrw = false,
    hijack_netrw = false,
    add_trailing = true,
    group_empty = true,
    lsp_diagnostics = true,
    disable_window_picker = true,
    hijack_cursor = false,
    icon_padding = ' ',
    symlink_arrorw = ' >> ',
    update_cwd = true,
    respect_buf_cwd = true,
    mappings = {
      custom_only = false,
      list = {}
    }
  },
  icons = {
    default =  '',
    symlink =  '',
    git =  {
      unstaged =  "✗",
      staged =  "✓",
      unmerged =  "",
      renamed =  "➜",
      untracked =  "★",
      deleted =  "",
      ignored =  "◌"
    },
    folder =  {
      arrow_open =  "",
      arrow_closed =  "",
      default =  "",
      open =  "",
      empty =  "",
      empty_open =  "",
      symlink =  "",
      symlink_open =  "",
    },
    lsp =  {
       hint =  "",
       info =  "",
       warning =  "",
       error =  "",
     }
  }
}

EOF
