" Pathogen
call pathogen#infect()

" Text Formatting
set autoindent
set smartindent
set nowrap
set tabstop=4
set shiftwidth=2
set softtabstop=2
set expandtab
set nosmarttab
set encoding=utf-8
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79 " Python is now using the standard rules.  BECAUSE I WRITE PYTHON

" Language syntax highlighting
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby " random files that are ruby-esq
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup() " markdown
au BufNewFile,BufRead *.json set ft=javascript " json

" UI
set laststatus=2
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*
set number
set ruler
set nolazyredraw
set noshowcmd
syntax on

" Visual
set showmatch
set mat=5
set visualbell " SHUT UP
set hlsearch
set incsearch
set ignorecase
set smartcase
set background=dark
colorscheme solarized

" Configuration
set nocompatible
set nobackup
set nowritebackup
set noswapfile
filetype plugin indent on

" Comments
map <Leader>/ <plug>NERDCommenterToggle<Esc>
imap <Leader>/ <Esc><plug>NERDCommenterToggle<Esc>

" C-# switches to tab
nmap <Leader>1 1gt
nmap <Leader>2 2gt
nmap <Leader>3 3gt
nmap <Leader>4 4gt
nmap <Leader>5 5gt

" Nerd tree
nmap <Leader>] :NERDTreeToggle<Esc>
autocmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
autocmd FocusGained * call s:UpdateNERDTree()
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" If the parameter is a directory, cd into it
function s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . fnameescape(a:directory)
  endif

  " Allows reading from stdin
  " ex: git diff | mvim -R -
  if strlen(a:directory) == 0 
    return
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

" NERDTree utility function
function s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif

  if exists(":CommandTFlush") == 2
    CommandTFlush
  endif
endfunction
